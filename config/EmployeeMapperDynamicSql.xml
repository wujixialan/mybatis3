<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zxg.dao.EmployeeMapperDynamicSql">
    <!--
        • if
        • choose (when, otherwise)
        • trim (where, set)
        • foreach
    -->
    <!--
        查询员工，要求，携带了哪个字段查询条件就带上这个字段的值
    -->
    <select id="getEmpsByConditionIf" resultType="com.zxg.mybatis.Employee">
        select * from mybatis1.tb1_employee
        <!--         where -->

        <!--
            test: 判断表达式（OGNL）
            OGNL参照PPT或者官方文档。
            从参数中取值进行判断
		 	遇见特殊符号应该去写转义字符：
		 	&&：
        -->
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="lastName != null and lastName != &quot;&quot;">
                and last_name like #{lastName}
            </if>
            <if test="gender == 0 or gender == 1">
                and gender = #{gender}
            </if>
            <if test="email != null and email.trim() != &quot;&quot;">
                and email = #{email}
            </if>
        </where>
    </select>


    <select id="getEmpsByConditionTrim" resultType="com.zxg.mybatis.Employee">
        select * from mybatis1.tb1_employee
        <!--
          后面多出的and或者or where标签不能解决
            prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。
                    prefix给拼串后的整个字符串加一个前缀
            prefixOverrides="":
                    前缀覆盖： 去掉整个字符串前面多余的字符
            suffix="":后缀
                    suffix给拼串后的整个字符串加一个后缀
            suffixOverrides=""
                    后缀覆盖：去掉整个字符串后面多余的字符
        -->
        <trim prefix="where" suffixOverrides="and | or">
            <if test="id != null">
                id = #{id} and
            </if>
            <if test="lastName != null and lastName != &quot;&quot;">
                last_name like #{lastName} and
            </if>
            <if test="gender == 0 or gender == 1">
                gender = #{gender} and
            </if>
            <if test="email != null and email.trim() != &quot;&quot;">
                email = #{email}
            </if>
        </trim>
    </select>


    <select id="getEmpsByConditionChoose" resultType="com.zxg.mybatis.Employee">
        select * from mybatis1.tb1_employee
        <where>
            <!--
                如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个
            -->
            <choose>
                <when test="id != null">
                    id = #{id}
                </when>
                <when test="lastName != null or lastName != &quot;&quot;">
                    last_name like #{id}
                </when>
                <when test="email != null or email.trim() != &quot;&quot;">
                    email = #{email}
                </when>
                <otherwise>
                    gender = #{gender}
                </otherwise>
            </choose>
        </where>
    </select>


    <update id="UpdateEmpsByConditionTrim">
        update mybatis1.tb1_employee
        <!--
            <set>
                <if test="lastName != null or lastName != &quot;&quot;">
                    last_name = #{lastName},
                </if>
                <if test="email != null">
                    email = #{email},
                </if>
                <if test="gender == 0 | gender == 1">
                    gender = #{gender}
                </if>
            </set>
        -->
        <trim prefix="set" suffixOverrides=",">
            <if test="lastName != null or lastName != &quot;&quot;">
                last_name = #{lastName},
            </if>
            <if test="email != null">
                email = #{email},
            </if>
            <if test="gender == 0 | gender == 1">
                gender = #{gender}
            </if>
        </trim>
        <where>
            id = #{id}
        </where>
    </update>


    <select id="getEmpsByConditionForeach" resultType="com.zxg.mybatis.Employee">
        select * from mybatis1.tb1_employee
        <where>
            id in
            <!--
	 		collection：指定要遍历的集合：
	 			list类型的参数会特殊处理封装在map中，map的key就叫list
	 		item：将当前遍历出的元素赋值给指定的变量
	 		separator:每个元素之间的分隔符
	 		open：遍历出所有结果拼接一个开始的字符
	 		close:遍历出所有结果拼接一个结束的字符
	 		index:索引。遍历list的时候是index就是索引，item就是当前值
	 				      遍历map的时候index表示的就是map的key，item就是map的值

	 		#{变量名}就能取出变量的值也就是当前遍历出的元素
	 	 -->
            <foreach collection="ids" item="item_id" separator="," open="(" close=")">
                #{item_id}
            </foreach>
        </where>


    </select>
</mapper>